import 'package:flutter/material.dart';
import 'package:get_it/get_it.dart';
import '../../../../core/services/serendipity_service.dart';
import '../../../../core/services/firebase_repositories.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_storage/firebase_storage.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:go_router/go_router.dart';
import 'package:google_fonts/google_fonts.dart';

class SerendipityPostsPage extends StatefulWidget {
  const SerendipityPostsPage({super.key});

  @override
  State<SerendipityPostsPage> createState() => _SerendipityPostsPageState();
}

class _SerendipityPostsPageState extends State<SerendipityPostsPage> {
  SerendipityService? _service;
  FirebasePostsRepo? _postsRepo;
  final _uid = FirebaseAuth.instance.currentUser?.uid ?? 'anon';
  bool _showAllPosts = false; // Toggle between user posts and all posts
  List<Map<String, dynamic>> _debugPosts = []; // For debugging

  @override
  void initState() {
    super.initState();
    _initializeServices();
    _loadDebugPosts();
  }

  void _initializeServices() {
    try {
      _service = GetIt.instance<SerendipityService>();
      _postsRepo = GetIt.instance<FirebasePostsRepo>();
    } catch (e) {
      print('Failed to initialize services: $e');
    }
  }

  // Load posts for debugging
  void _loadDebugPosts() async {
    if (_postsRepo != null) {
      try {
        // Get all posts to see what's in the database
        _postsRepo!.allPostsStream().listen((posts) {
          if (mounted) {
            setState(() {
              _debugPosts = posts;
            });
          }
          print('Debug: Found ${posts.length} total posts in database');
        });
      } catch (e) {
        print('Error loading debug posts: $e');
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    final scheme = Theme.of(context).colorScheme;
    return Scaffold(
      appBar: AppBar(
        title: Row(
          children: [
            Container(
              padding: const EdgeInsets.all(8),
              decoration: BoxDecoration(
                color: scheme.primary,
                borderRadius: BorderRadius.circular(8),
              ),
              child: const Icon(
                Icons.network_check,
                color: Colors.white,
                size: 24,
              ),
            ),
            const SizedBox(width: 12),
            Text(
              'Putrace',
              style: GoogleFonts.inter(
                fontSize: 20,
                fontWeight: FontWeight.w700,
                color: scheme.onSurface,
              ),
            ),
          ],
        ),
        backgroundColor: Colors.transparent,
        elevation: 0,
        centerTitle: false,
        leading: IconButton(
          icon: const Icon(Icons.arrow_back),
          onPressed: () {
            if (Navigator.of(context).canPop()) {
              Navigator.of(context).pop();
            } else {
              context.go('/putrace');
            }
          },
        ),
        actions: [
          IconButton(
            icon: const Icon(Icons.add),
            onPressed: () => context.go('/putrace/post'),
          ),
          // Debug toggle button
          IconButton(
            icon: Icon(_showAllPosts ? Icons.person : Icons.people),
            onPressed: () {
              setState(() {
                _showAllPosts = !_showAllPosts;
              });
            },
            tooltip: _showAllPosts ? 'Show My Posts' : 'Show All Posts',
          ),
        ],
      ),
      body: _postsRepo == null
          ? const Center(
              child: Text('Failed to load posts service. Please restart the app.'),
            )
          : Column(
              children: [
                // Debug Info Section
                Container(
                  width: double.infinity,
                  padding: const EdgeInsets.all(16),
                  color: scheme.surfaceContainerHighest.withValues(alpha: 0.3),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Row(
                        children: [
                          Icon(
                            Icons.bug_report,
                            size: 16,
                            color: scheme.primary,
                          ),
                          const SizedBox(width: 8),
                          Text(
                            'Debug Info',
                            style: TextStyle(
                              fontSize: 12,
                              fontWeight: FontWeight.w600,
                              color: scheme.primary,
                            ),
                          ),
                        ],
                      ),
                      const SizedBox(height: 8),
                      Text(
                        'Current User ID: $_uid',
                        style: TextStyle(
                          fontSize: 11,
                          color: scheme.onSurface.withValues(alpha: 0.7),
                        ),
                      ),
                      Text(
                        'Total Posts in DB: ${_debugPosts.length}',
                        style: TextStyle(
                          fontSize: 11,
                          color: scheme.onSurface.withValues(alpha: 0.7),
                        ),
                      ),
                      Text(
                        'Showing: ${_showAllPosts ? 'All Posts' : 'My Posts'}',
                        style: TextStyle(
                          fontSize: 11,
                          color: scheme.onSurface.withValues(alpha: 0.7),
                        ),
                      ),
                    ],
                  ),
                ),
                
                // Posts List
                Expanded(
                  child: StreamBuilder<List<Map<String, dynamic>>>(
                    stream: _showAllPosts 
                        ? _postsRepo!.allPostsStream()
                        : _postsRepo!.myPostsStream(_uid),
                    builder: (context, snapshot) {
                      if (snapshot.hasError) {
                        return Center(child: Text('Error: ${snapshot.error}'));
                      }
                      
                      if (!snapshot.hasData) {
                        return const Center(child: CircularProgressIndicator());
                      }
                      
                      final posts = snapshot.data!;
                      if (posts.isEmpty) {
                        return Center(
                          child: Column(
                            mainAxisAlignment: MainAxisAlignment.center,
                            children: [
                              Icon(Icons.post_add, size: 64, color: scheme.outline),
                              const SizedBox(height: 16),
                              Text(
                                'No posts yet',
                                style: Theme.of(context).textTheme.headlineSmall,
                              ),
                              const SizedBox(height: 8),
                              Text(
                                'Create your first post to get started',
                                style: Theme.of(context).textTheme.bodyMedium?.copyWith(
                                  color: scheme.outline,
                                ),
                              ),
                              const SizedBox(height: 16),
                              FilledButton.icon(
                                onPressed: () => context.go('/putrace/post'),
                                icon: const Icon(Icons.add),
                                label: const Text('Create Post'),
                              ),
                            ],
                          ),
                        );
                      }
                      
                      return ListView.builder(
                        padding: const EdgeInsets.all(16),
                        itemCount: posts.length,
                        itemBuilder: (context, index) {
                          final post = posts[index];
                          final hasOverlaps = post['hasOverlaps'] == true;
                          final isArchived = post['archived'] == true;
                          final photoUrl = post['photoUrl'] as String?;
                          
                          return Card(
                            margin: const EdgeInsets.only(bottom: 16),
                            child: ListTile(
                              contentPadding: const EdgeInsets.all(16),
                              leading: photoUrl != null
                                  ? ClipRRect(
                                      borderRadius: BorderRadius.circular(8),
                                      child: Image.network(
                                        photoUrl,
                                        width: 60,
                                        height: 60,
                                        fit: BoxFit.cover,
                                        errorBuilder: (_, __, ___) => Container(
                                          width: 60,
                                          height: 60,
                                          decoration: BoxDecoration(
                                            color: scheme.outlineVariant,
                                            borderRadius: BorderRadius.circular(8),
                                          ),
                                          child: Icon(Icons.image, color: scheme.outline),
                                        ),
                                      ),
                                    )
                                  : Container(
                                      width: 60,
                                      height: 60,
                                      decoration: BoxDecoration(
                                        color: scheme.primaryContainer,
                                        borderRadius: BorderRadius.circular(8),
                                      ),
                                      child: Icon(Icons.event, color: scheme.primary),
                                    ),
                              title: Text(
                                post['text'] ?? '',
                                style: TextStyle(
                                  decoration: isArchived ? TextDecoration.lineThrough : null,
                                  color: isArchived ? scheme.outline : null,
                                ),
                              ),
                              subtitle: Column(
                                crossAxisAlignment: CrossAxisAlignment.start,
                                children: [
                                  const SizedBox(height: 8),
                                  if (post['tags'] != null && (post['tags'] as List).isNotEmpty)
                                    Wrap(
                                      spacing: 4,
                                      children: (post['tags'] as List)
                                          .map((tag) => Chip(
                                                label: Text(
                                                  tag.toString(),
                                                  style: const TextStyle(fontSize: 10),
                                                ),
                                                backgroundColor: scheme.primaryContainer,
                                                labelStyle: TextStyle(
                                                  color: scheme.onPrimaryContainer,
                                                ),
                                                padding: const EdgeInsets.symmetric(
                                                  horizontal: 8,
                                                  vertical: 4,
                                                ),
                                                materialTapTargetSize: MaterialTapTargetSize.shrinkWrap,
                                                visualDensity: VisualDensity.compact,
                                              ))
                                          .toList(),
                                    ),
                                  const SizedBox(height: 8),
                                  Row(
                                    children: [
                                      Icon(
                                        Icons.schedule,
                                        size: 14,
                                        color: scheme.outline,
                                      ),
                                      const SizedBox(width: 4),
                                      Text(
                                        _formatTimestamp(post['timestamp']),
                                        style: TextStyle(
                                          fontSize: 12,
                                          color: scheme.outline,
                                        ),
                                      ),
                                      if (hasOverlaps) ...[
                                        const SizedBox(width: 16),
                                        Icon(
                                          Icons.people,
                                          size: 14,
                                          color: scheme.primary,
                                        ),
                                        const SizedBox(width: 4),
                                        Text(
                                          'Has overlaps',
                                          style: TextStyle(
                                            fontSize: 12,
                                            color: scheme.primary,
                                            fontWeight: FontWeight.w500,
                                          ),
                                        ),
                                      ],
                                    ],
                                  ),
                                  if (post['location'] != null) ...[
                                    const SizedBox(height: 8),
                                    Row(
                                      children: [
                                        Icon(
                                          Icons.location_on,
                                          size: 14,
                                          color: scheme.outline,
                                        ),
                                        const SizedBox(width: 4),
                                        Text(
                                          post['location'],
                                          style: TextStyle(
                                            fontSize: 12,
                                            color: scheme.outline,
                                          ),
                                        ),
                                      ],
                                    ),
                                  ],
                                ],
                              ),
                              trailing: PopupMenuButton<String>(
                                onSelected: (value) => _handlePostAction(value, post),
                                itemBuilder: (context) => [
                                  if (!isArchived) ...[
                                    const PopupMenuItem(
                                      value: 'edit',
                                      child: Row(
                                        children: [
                                          Icon(Icons.edit, size: 16),
                                          SizedBox(width: 8),
                                          Text('Edit'),
                                        ],
                                      ),
                                    ),
                                    const PopupMenuItem(
                                      value: 'archive',
                                      child: Row(
                                        children: [
                                          Icon(Icons.archive, size: 16),
                                          SizedBox(width: 8),
                                          Text('Archive'),
                                        ],
                                      ),
                                    ),
                                  ] else ...[
                                    const PopupMenuItem(
                                      value: 'unarchive',
                                      child: Row(
                                        children: [
                                          Icon(Icons.unarchive, size: 16),
                                          SizedBox(width: 8),
                                          Text('Unarchive'),
                                        ],
                                      ),
                                    ),
                                  ],
                                  const PopupMenuItem(
                                    value: 'delete',
                                    child: Row(
                                      children: [
                                        Icon(Icons.delete, size: 16, color: Colors.red),
                                        SizedBox(width: 8),
                                        Text('Delete', style: TextStyle(color: Colors.red)),
                                      ],
                                    ),
                                  ),
                                ],
                              ),
                            ),
                          );
                        },
                      );
                    },
                  ),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  String _formatTimestamp(dynamic timestamp) {
    if (timestamp == null) return 'Unknown';
    if (timestamp is Timestamp) {
      return '${timestamp.toDate().month}/${timestamp.toDate().day}';
    }
    return 'Unknown';
  }

  Future<void> _handlePostAction(String action, Map<String, dynamic> post) async {
    final postId = post['id'] as String;
    
    switch (action) {
      case 'edit':
        // Navigate to edit page (reuse composer with existing data)
        context.go('/putrace/post', extra: post);
        break;
        
      case 'archive':
        if (_postsRepo != null) {
          await _postsRepo!.update(postId, {
            'archived': true,
            'archivedAt': FieldValue.serverTimestamp(),
          });
        }
        break;
        
      case 'unarchive':
        if (_postsRepo != null) {
          await _postsRepo!.update(postId, {
            'archived': false,
            'archivedAt': null,
          });
        }
        break;
        
      case 'delete':
        final confirmed = await showDialog<bool>(
          context: context,
          builder: (context) => AlertDialog(
            title: const Text('Delete Post'),
            content: const Text('Are you sure you want to delete this post? This action cannot be undone.'),
            actions: [
              TextButton(
                onPressed: () => Navigator.of(context).pop(false),
                child: const Text('Cancel'),
              ),
              FilledButton(
                onPressed: () => Navigator.of(context).pop(true),
                style: FilledButton.styleFrom(
                  backgroundColor: Colors.red,
                  foregroundColor: Colors.white,
                ),
                child: const Text('Delete'),
              ),
            ],
          ),
        );
        
        if (confirmed == true) {
          await _deletePost(postId, post);
        }
        break;
    }
  }

  Future<void> _deletePost(String postId, Map<String, dynamic> post) async {
    try {
      // Delete photo from Storage if exists
      final photoUrl = post['photoUrl'] as String?;
      if (photoUrl != null) {
        try {
          final ref = FirebaseStorage.instance.refFromURL(photoUrl);
          await ref.delete();
        } catch (e) {
          // Photo might already be deleted, continue
          print('Photo deletion error: $e');
        }
      }
      
      // Delete post from Firestore
      await FirebaseFirestore.instance
          .collection('posts')
          .doc(postId)
          .delete();
          
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('Post deleted successfully')),
        );
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Error deleting post: $e'),
            backgroundColor: Colors.red,
          ),
        );
      }
    }
  }
}
